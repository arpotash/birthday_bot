from aiogram import Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import cur, conn
from aiogram.fsm.state import State, StatesGroup

router = Router()


class RegisterAccount(StatesGroup):
    first_name = State()
    last_name = State()
    will_be = State()
    comment = State()


class CreateWish(StatesGroup):
    wish = State()


@router.message(StateFilter(None), CommandStart())
async def register(message: types.Message, state: FSMContext):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç!\n\n'
        f'–ï—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ —á–∏—Ç–∞–µ—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ª—é–¥–µ–π: '
        f'–ü–æ—Ç–∞—à–æ–≤ –ê—Ä—Ç—ë–º, –ú–∞–ª–∞—Ö–æ–≤ –ü–∞–≤–µ–ª, –†–æ–º–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π.\n\n'
        f'–ù–µ –±—É–¥—É –ª–∏—Ç—å –º–Ω–æ–≥–æ –≤–æ–¥—ã, –≤—Å–µ —á–µ—Ç–∫–æ –∏ –ø–æ –ø–æ—Ä—è–¥–∫—É.\n\n'
        f'–î–∞—Ç–∞: 12-13 –∏—é–ª—è\n\n'
        f'–î—Ä–µ—Å—Å-–∫–æ–¥: [–£–∫–∞–∂–∏—Ç–µ –¥—Ä–µ—Å—Å-–∫–æ–¥]\n\n'
        f'–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º: –≤–∏—à-–ª–∏—Å—Ç–∞ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –±—É–¥–µ—Ç, –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ - –¥–µ–Ω—å–≥–∏ :)\n\n'
        f'–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–õ–æ–∫–∞—Ü–∏–∏"\n\n'
        f'–ü–æ –≤—Å–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "Wish"\n\n'
        f'–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!'
    )
    await message.answer("–í–≤–µ–¥–∏ –∏–º—è", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegisterAccount.first_name)


@router.message(RegisterAccount.first_name, F.text)
async def add_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é")
    await state.set_state(RegisterAccount.last_name)


@router.message(RegisterAccount.last_name, F.text)
async def add_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    options = ['–ë—É–¥—É', '–¢–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é', '–ù–µ —Å–º–æ–≥—É']
    keyboard_markup = [
        [
            types.InlineKeyboardButton(
                text=option,
                callback_data=f'option_{options.index(option)}'
            )
        ]
        for option in options
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_markup)
    await message.answer("–ê —Ç—ã –±—É–¥–µ—à—å –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ?", reply_markup=markup)
    await state.set_state(RegisterAccount.will_be)

@router.message(RegisterAccount.will_be, F.text)
@router.callback_query(lambda query: query.data.startswith('option_'))
async def process_option(callback_query: types.CallbackQuery, state: FSMContext):
    selected_option_index = int(callback_query.data.split('_')[1])
    options = ['–ë—É–¥—É', '–¢–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é', '–ù–µ —Å–º–æ–≥—É']
    selected_option = options[selected_option_index]
    await state.update_data(will_be=selected_option)
    await callback_query.message.answer("–ï—Å–ª–∏ –±—É–¥–µ—à—å +1, –ø–∏—à–∏ +1, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç–æ–∂–µ –ø–∏—à–∏")
    await state.set_state(RegisterAccount.comment)


@router.message(RegisterAccount.comment, F.text)
async def add_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    values = tuple(data for data in data.values())
    insert_account_query = f'insert into account (first_name, last_name, will_be, comment) values (%s, %s, %s, %s)'
    try:
        cur.execute(insert_account_query, values)
        conn.commit()
    except Exception as e:
        await message.answer("–ù–µ–Ω–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑")
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏")



@router.message(Command(commands='members'))
async def get_members(message: types.Message):
    all_member_query = 'select first_name, last_name, will_be, comment from account'
    cur.execute(all_member_query)
    members = cur.fetchall()
    formatted_members = "\n".join([f"{member[0]} {member[1]}" for member in members])

    await message.answer(formatted_members)


@router.message(Command(commands="location"))
async def get_location(message: types.Message):
    media = []
    photo_paths = [
        'photo_6.png',
        'photo_7.png',
        'photo_3.png',
        'photo_2.png',
        'photo_4.png',
        'photo_5.png',
        'photo_6.png'
    ]
    for file in photo_paths:
        photo = types.InputMediaPhoto(media=types.FSInputFile(file))
        media.append(photo)

    await message.answer_media_group(media=media)
    await message.answer(
        "üè° **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ç—Ç–µ–¥–∂** —Å 6-—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∞–ª—å–Ω—è–º–∏, 2-–º—è –∏–≥—Ä–æ–≤—ã–º–∏ –∑–∞–ª–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –±–æ–ª—å—à–∏–º –±–∞–Ω–∫–µ—Ç–Ω—ã–º –∑–∞–ª–æ–º –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–π –∫—É—Ö–Ω–µ–π.\n"
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ 20 –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –ö–ê–î–∞ –∏ 5 –º–∏–Ω—É—Ç –æ—Ç –ó–°–î, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.\n\n"
        "üî• **–û—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è**: —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞–º–∏ –∏ —Ç–µ–ø–ª—ã–º –ø–æ–ª–æ–º, –≤ –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, –Ω–æ –∏ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–æ—Å—Ç–µ–π.\n\n"
        "üìç **–ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ**:\n"
        "- –ë–æ–ª—å—à–æ–π –±–∞–Ω–∫–µ—Ç–Ω—ã–π –∑–∞–ª –Ω–∞ 50 —á–µ–ª–æ–≤–µ–∫ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–≤—É–∫–æ–º, —Å–≤–µ—Ç–æ–º –∏ –∫–∞—Ä–∞–æ–∫–µ.\n"
        "- 2 —Å–ø–∞–ª—å–Ω–∏ –∏ 2 —Å–∞–Ω—É–∑–ª–∞.\n\n"
        "üìç **–ù–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ**:\n"
        "- –û—Ç–¥–µ–ª—å–Ω–∞—è –°–ü–ê-–∑–æ–Ω–∞ —Å —Å–∞—É–Ω–æ–π, –ø–æ–∫–µ—Ä–Ω—ã–º —Å—Ç–æ–ª–æ–º –∏ –º—è–≥–∫–∏–º –¥–∏–≤–∞–Ω–æ–º.\n"
        "- –ë–æ–ª—å—à–∞—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –ø–µ—á—å—é –Ω–∞ –¥—Ä–æ–≤–∞—Ö –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–∞–º–∏–Ω–æ–º –¥–ª—è –±–∞—Ä–±–µ–∫—é.\n"
        "- 2 –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ª–∞ —Å –∫—Ä—É–≥–ª—ã–º —Å—Ç–æ–ª–æ–º –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–µ—Ä–Ω—ã–º–∏ —Å—Ç–æ–ª–∞–º–∏.\n"
        "- 4 —Å–ø–∞–ª—å–Ω–∏ –∏ 3 —Å–∞–Ω—É–∑–ª–∞.\n\n"
        "üöó **–ù–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏**: –±–æ–ª—å—à–∞—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞."
    )


@router.message(StateFilter(None), Command(commands="wishes"))
async def create_wish(message: types.Message, state: FSMContext):
    await message.answer("–ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–∏—à–∏ –∏—Ö –∑–¥–µ—Å—å", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CreateWish.wish)


@router.message(CreateWish.wish, F.text)
async def get_wish(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    if data:
        values = tuple(data for data in data.values())
        insert_account_query = f'insert into wish (wish) values (%s)'
        cur.execute(insert_account_query, values)
        conn.commit()
