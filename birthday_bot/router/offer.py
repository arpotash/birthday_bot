from aiogram import Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import types
from aiogram.fsm.context import FSMContext

from db import cur, conn
from aiogram.fsm.state import State, StatesGroup

from router.register import register

offer_router = Router()


class CreateWish(StatesGroup):
    wish = State()

class AdminAccount(StatesGroup):
    password = State()




@offer_router.message(Command(commands='members'))
async def get_members_count(message: types.Message, state: FSMContext):
    count_member_query = 'select count(*) from account'
    cur.execute(count_member_query)
    members_count = cur.fetchall()
    formatted_members = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {} –∏–∑ 30".format(members_count[0][0])
    await message.answer(formatted_members)
    await message.answer('–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await state.set_state(AdminAccount.password)



@offer_router.message(AdminAccount.password, F.text)
async def get_members(message: types.Message, state: FSMContext):
    if message.text == "/members":
        await state.clear()
        return await get_members_count(message, state)
    if message.text == "/start":
        await state.clear()
        return await register(message, state)

    if message.text == 'hiranuka':
        all_member_query = 'select first_name, last_name, will_be, comment from account order by will_be'
        cur.execute(all_member_query)
        members = cur.fetchall()
        formatted_members = "\n".join([f"{member[0]} {member[1]} {member[2]}" for member in members])
        await message.answer(f'–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{formatted_members}')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!')



@offer_router.message(Command(commands="location"))
async def get_location(message: types.Message, state: FSMContext):
    await state.clear()
    media = []
    photo_paths = [
        'photo_6.png',
        'photo_7.png',
        'photo_3.png',
        'photo_2.png',
        'photo_4.png',
        'photo_5.png',
        'photo_6.png'
    ]
    for file in photo_paths:
        photo = types.InputMediaPhoto(media=types.FSInputFile(file))
        media.append(photo)

    await message.answer_media_group(media=media)
    await message.answer(
        "üè° **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ç—Ç–µ–¥–∂** —Å 6-—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∞–ª—å–Ω—è–º–∏, 2-–º—è –∏–≥—Ä–æ–≤—ã–º–∏ –∑–∞–ª–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –±–æ–ª—å—à–∏–º –±–∞–Ω–∫–µ—Ç–Ω—ã–º –∑–∞–ª–æ–º –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–π –∫—É—Ö–Ω–µ–π.\n"
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ 20 –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –ö–ê–î–∞ –∏ 5 –º–∏–Ω—É—Ç –æ—Ç –ó–°–î, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.\n\n"
        "üî• **–û—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è**: —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞–º–∏ –∏ —Ç–µ–ø–ª—ã–º –ø–æ–ª–æ–º, –≤ –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, –Ω–æ –∏ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–æ—Å—Ç–µ–π.\n\n"
        "üìç **–ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ**:\n"
        "- –ë–æ–ª—å—à–æ–π –±–∞–Ω–∫–µ—Ç–Ω—ã–π –∑–∞–ª –Ω–∞ 50 —á–µ–ª–æ–≤–µ–∫ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–≤—É–∫–æ–º, —Å–≤–µ—Ç–æ–º –∏ –∫–∞—Ä–∞–æ–∫–µ.\n"
        "- 2 —Å–ø–∞–ª—å–Ω–∏ –∏ 2 —Å–∞–Ω—É–∑–ª–∞.\n\n"
        "üìç **–ù–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ**:\n"
        "- –û—Ç–¥–µ–ª—å–Ω–∞—è –°–ü–ê-–∑–æ–Ω–∞ —Å —Å–∞—É–Ω–æ–π, –ø–æ–∫–µ—Ä–Ω—ã–º —Å—Ç–æ–ª–æ–º –∏ –º—è–≥–∫–∏–º –¥–∏–≤–∞–Ω–æ–º.\n"
        "- –ë–æ–ª—å—à–∞—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –ø–µ—á—å—é –Ω–∞ –¥—Ä–æ–≤–∞—Ö –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–∞–º–∏–Ω–æ–º –¥–ª—è –±–∞—Ä–±–µ–∫—é.\n"
        "- 2 –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ª–∞ —Å –∫—Ä—É–≥–ª—ã–º —Å—Ç–æ–ª–æ–º –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–µ—Ä–Ω—ã–º–∏ —Å—Ç–æ–ª–∞–º–∏.\n"
        "- 4 —Å–ø–∞–ª—å–Ω–∏ –∏ 3 —Å–∞–Ω—É–∑–ª–∞.\n\n"
        "üöó **–ù–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏**: –±–æ–ª—å—à–∞—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞."
        "–ê–¥—Ä–µ—Å - –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª., –í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π —Ä-–Ω, –Æ–∫–∫–æ–≤—Å–∫–æ–µ —Å–µ–ª—å—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ, \n\n"
        "–°–ù–¢ –¢–µ—Ä—Ä–∞-–í—ã–±–æ—Ä–≥—Å–∫–æ–µ, –õ–∞–∑–∞—Ä–µ–≤—Å–∫–∞—è —É–ª., 20, –í—ã–±–æ—Ä–≥—Å–∫–æ–µ —à–æ—Å—Å–µ, 17 –∫–º\n\n"
    )

# @offer_router.message(StateFilter(None), Command(commands="wishes"))
# async def create_wish(message: types.Message, state: FSMContext):
#     await message.answer("–ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–∏—à–∏ –∏—Ö –∑–¥–µ—Å—å", reply_markup=types.ReplyKeyboardRemove())
#     await state.set_state(CreateWish.wish)

#
# @offer_router.message(CreateWish.wish, F.text)
# async def get_wish(message: types.Message, state: FSMContext):
#     await state.update_data(comment=message.text)
#     data = await state.get_data()
#     if data:
#         values = tuple(data for data in data.values())
#         insert_account_query = f'insert into wish (wish) values (%s)'
#         try:
#             cur.execute(insert_account_query, values)
#             conn.commit()
#             await message.answer("–ü–æ–∂–µ–ª–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ!")
#         except Exception as e:
#             await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Å–µ—Ä–≤–∞–∫ —É–ø–∞–ª")
#             conn.rollback()
#             raise e
#         finally:
#             await state.clear()
